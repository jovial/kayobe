---
- name: Ensure image download directory exists
  file:
    path: "{{ ipa_images_cache_path }}"
    state: directory
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
  become: True

- name: Ensure Ironic Python Agent (IPA) images are downloaded
  get_url:
    url: "{{ item.url }}"
    dest: "{{ ipa_images_cache_path }}/{{ item.filename }}"
    force: true
    backup: true
  with_items:
    - url: "{{ ipa_images_kernel_url }}"
      filename: "{{ ipa_images_kernel_name }}"
    - url: "{{ ipa_images_ramdisk_url }}"
      filename: "{{ ipa_images_ramdisk_name }}"
  when: item.url != None

- name: Compute the MD5 checksum of the Ironic Python Agent (IPA) images
  stat:
    path: "{{ ipa_images_cache_path }}/{{ item }}"
    get_checksum: True
    checksum_algorithm: md5
    mime: False
  with_items:
    - "{{ ipa_images_kernel_name }}"
    - "{{ ipa_images_ramdisk_name }}"
  register: ipa_images_checksum

- name: Fail if an image does not exist
  fail:
    msg: "{{ item.path }} does not exist"
  with_items:
    - path: "{{ ipa_images_cache_path }}/{{ ipa_images_kernel_name }}"
      exists: "{{ ipa_images_checksum.results[0].stat.exists | bool }}"
    - path: "{{ ipa_images_cache_path }}/{{ ipa_images_ramdisk_name }}"
      exists: "{{ ipa_images_checksum.results[1].stat.exists | bool }}"
  when:
    - not item.path

- name: Activate the virtualenv
  include_role:
    name: activate-virtualenv
  vars:
    activate_virtualenv_path: "{{ ipa_images_venv }}"

- name: Ensure we have python-ironicclient installed
  pip:
    name: python-ironicclient
    virtualenv: "{{ ipa_images_venv }}"

# To support updating the IPA image, we check the MD5 sum of the cached image
# files, and compare with the images in Glance (if there are any).

- name: Gather facts about Ironic Python Agent (IPA) kernel image
  os_image_facts:
    auth_type: "{{ ipa_images_openstack_auth_type }}"
    auth: "{{ ipa_images_openstack_auth }}"
    image: "{{ ipa_images_kernel_name }}"

- name: Set a fact containing the Ironic Python Agent (IPA) kernel image
  set_fact:
    ipa_images_kernel_openstack_image: "{{ openstack_image if openstack_image else {} }}"

- name: Gather facts about Ironic Python Agent (IPA) ramdisk image
  os_image_facts:
    auth_type: "{{ ipa_images_openstack_auth_type }}"
    auth: "{{ ipa_images_openstack_auth }}"
    image: "{{ ipa_images_ramdisk_name }}"

- name: Set a fact containing the Ironic Python Agent (IPA) ramdisk image
  set_fact:
    ipa_images_ramdisk_openstack_image: "{{ openstack_image if openstack_image else {} }}"

# The os_image module will get confused if there are multiple images with the
# same name, so temporarily rename the old images. They will still be
# accessible via UUID.
- name: Ensure old Ironic Python Agent (IPA) images are renamed
  command: >
    {{ ipa_images_venv }}/bin/openstack image set {{ item.name }} --name {{ item.name }}.{{ extension }}
  vars:
    extension: "{{ item.created_at | replace(':', '-')}}"
  with_items:
    - name: "{{ ipa_images_kernel_name }}"
      created_at: "{{ ipa_images_kernel_openstack_image.created_at | default }}"
      checksum: "{{ ipa_images_checksum.results[0].stat.checksum }}"
      glance_checksum: "{{ ipa_images_kernel_openstack_image.checksum | default }}"
    - name: "{{ ipa_images_ramdisk_name }}"
      created_at: "{{ ipa_images_ramdisk_openstack_image.created_at | default }}"
      checksum: "{{ ipa_images_checksum.results[1].stat.checksum }}"
      glance_checksum: "{{ ipa_images_ramdisk_openstack_image.checksum | default }}"
  when:
    - item.glance_checksum
    - item.checksum != item.glance_checksum
  environment: "{{ ipa_images_openstack_auth_env }}"

- name: Ensure Ironic Python Agent (IPA) images are registered with Glance
  os_image:
    auth_type: "{{ ipa_images_openstack_auth_type }}"
    auth: "{{ ipa_images_openstack_auth }}"
    name: "{{ item.name }}"
    container_format: "{{ item.format }}"
    disk_format: "{{ item.format }}"
    state: present
    filename: "{{ ipa_images_cache_path }}/{{ item.name }}"
  with_items:
    - name: "{{ ipa_images_kernel_name }}"
      format: aki
    - name: "{{ ipa_images_ramdisk_name }}"
      format: ari
  register: ipa_images_new_images

- name: Get a list of ironic nodes
  command: |
    {{ ipa_images_venv }}/bin/openstack baremetal node list --fields name uuid driver_info -f json
  register: ipa_images_ironic_node_list
  changed_when: False
  environment: "{{ ipa_images_openstack_auth_env }}"

- name: Initialise a fact containing the ironic nodes
  set_fact:
    ipa_images_ironic_nodes: []

- name: Update a fact containing the ironic nodes
  set_fact:
    ipa_images_ironic_nodes: "{{ ipa_images_ironic_nodes + [item] }}"
  with_items: "{{ ipa_images_ironic_node_list.stdout | from_json }}"
  when: >
    not ipa_images_compute_node_limit or
    item['Name'] in ipa_images_compute_node_limit

- name: Ensure ironic nodes use the new Ironic Python Agent (IPA) images
  command: >
    {{ ipa_images_venv }}/bin/openstack baremetal node set {{ item.UUID }}
    --driver-info deploy_kernel={{ kernel_uuid }}
    --driver-info deploy_ramdisk={{ ramdisk_uuid }}
  with_items: "{{ ipa_images_ironic_nodes }}"
  vars:
    ramdisk_uuid: "{{ ipa_images_new_images.results[1].id }}"
    kernel_uuid: "{{ ipa_images_new_images.results[0].id }}"
  when:
    item["Driver Info"].deploy_kernel != kernel_uuid or
    item["Driver Info"].deploy_ramdisk != ramdisk_uuid 
  environment: "{{ ipa_images_openstack_auth_env }}"

- name: Deactivate the virtualenv
  include_role:
    name: deactivate-virtualenv
